#!/opt/anaconda/envs/env_ewf_satcen_03_01_01/bin/python

# This node gets input refrences and run-time params 
# Controls if master/s and slave/s are valid
# Publishes dict-format data containing master/s & slave/s selves & subswath & polarisation params 


import os
import sys
sys.path.append('/'.join([os.environ['_CIOP_APPLICATION_PATH'], 'util']))
sys.path.append('../util')


from util import *
import json
import string
import atexit
import itertools
import cioppy 
ciop = cioppy.Cioppy()
import pandas as pd    
# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_NO_OUTPUT = 30
ERR_OVERLAP = 40
ERR_PRODUCT_TYPE = 50
ERR_TRACK = 60
ERR_POLARISATION = 70

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve Sentinel-1 product enclosure',
           ERR_STAGEIN: 'Could not stage-in Sentinel-1 product', 
           ERR_OVERLAP: 'At least one of the products does not overlap against the selected AOI or the two products do not overlap themselves',
           ERR_PRODUCT_TYPE: 'At least one of the products is not a SLC image',
           ERR_TRACK: 'Products do not have the same track',
           ERR_POLARISATION: 'Products do not have the same polarisation',
           ERR_NO_OUTPUT: "Missing output"}
 
    ciop.log(log_level, msg[exit_code])  

def main():
        
    ciop = cioppy.Cioppy()
    
    os.chdir(ciop.tmp_dir)
    
    #aoi = ciop.getparam('aoi')

    polarizations = ciop.getparam('polarisation')#.split(',')
    #sub_swaths = ciop.getparam('subswath').split(';')
    sub_swaths = ciop.getparam('subswath').split('+') 
    references = []
        
    for input in sys.stdin:
        ciop.log('INFO', 'Adding {}'.format(input.rstrip()))       
        references.append(input.rstrip().split(',')[0])
    
    input_products = pd.DataFrame()

    fields = 'identifier,self,enclosure,wkt,startdate,enddate,orbitDirection,productType,track,polarisationChannels'
    search_result_params = []
    for index, end_point in enumerate(references):
        ciop.log('INFO', 'Getting metadata for {}'.format(end_point))      
        temp_df = pd.DataFrame.from_dict(ciop.search(end_point=end_point,
                                                     params=search_result_params,
                                                     output_fields=fields, 
                                                     model='EOP',
                                                     timeout='60000'))
        
        input_products = input_products.append(temp_df, ignore_index=True)
        
        
        
    #Verify Validity of input products for processing:
    group_analysis(input_products)
    
    if len(input_products.groupby('productType'))>1:
        sys.exit(ERR_PRODUCT_TYPE)
    
    if len(input_products.groupby('track'))>1:
        sys.exit(ERR_TRACK)
    
    if len(input_products.groupby('polarisationChannels'))>1:
        sys.exit(ERR_POLARISATION)
    
    #check to be applied for AOI overlap & products overlap
    #....to be added
    #....
    #....
    
    # stage-in to be done once for all data
    #Stage-IN: to be done once for all data instead of up to 3 times (subswath(s) parallel processing in the next node)
        
    #master_local_path = []

    #master_uids = input_products[input_products['ordinal_type'] == 'Pre'].identifier.values
    mst_start_date = input_products[input_products['ordinal_type'] == 'Pre'].startdate.values
    #mst_end_date = input_products[input_products['ordinal_type'] == 'Pre'].enddate.values
    master_enclosure = input_products[input_products['ordinal_type'] == 'Pre'].enclosure.values

    #for mst_enclosure in master_enclosures:

        #master_id = input_products[input_products['enclosure'] == mst_enclosure].identifier.values[0]
        #ciop.log('INFO', 'Staging-in {}'.format(master_id))
        #product_path = ciop.copy(mst_enclosure,ciop.tmp_dir)
        #ciop.log('INFO', 'Staged-in {} into local path: {}'.format(master_id,product_path))
        #master_local_path.append("{0}/{1}.SAFE/manifest.safe".format(product_path,master_id))

    #ciop.log('DEBUG', 'Masters local paths: {}'.format(master_local_path))

    master_ref_start = input_products[input_products['startdate'] == min(mst_start_date)].identifier.values[0]
        

    #slave_local_path = []

    #slave_uids = input_products[input_products['ordinal_type'] == 'Pst'].identifier.values
    slv_end_date = input_products[input_products['ordinal_type'] == 'Pst'].enddate.values
    slave_enclosure = input_products[input_products['ordinal_type'] == 'Pst'].enclosure.values

#    for slv_enclosure in slave_enclosures:
#
#        slave_id = input_products[input_products['enclosure'] == slv_enclosure].identifier.values[0]
#        ciop.log('INFO', 'Staging-in {}'.format(slave_id))
#        product_path = ciop.copy(slv_enclosure,ciop.tmp_dir)
#        ciop.log('INFO', 'Staged-in {} into local path: {}'.format(slave_id,product_path))
#        slave_local_path.append("{0}/{1}.SAFE/manifest.safe".format(product_path,slave_id))
#        
#    ciop.log('DEBUG', 'Slaves local paths: {}'.format(slave_local_path))

    slave_ref_end = input_products[input_products['enddate'] == max(slv_end_date)].identifier.values[0]

    
    for k , pol in itertools.product(sub_swaths , polarizations):
        series = dict()
        series['master_ref'] = ','.join(input_products[input_products['ordinal_type'] == 'Pre'].self.values)
        series['slave_ref'] = ','.join(input_products[input_products['ordinal_type'] == 'Pst'].self.values)
        series['subswath'] = k
        series['polarization'] = pol
        series['master_enclosure'] = ','.join(master_enclosure)
        series['slave_enclosure'] = ','.join(slave_enclosure)
        series['master_ref_start'] = master_ref_start
        series['slave_ref_end'] = slave_ref_end
        
        
        ciop.log('DEBUG','input_series: \{}'.format(series))
        
        #publish master/slave/subswath/pol/mst and slv local_paths and echo to next node 
        ciop.publish((json.dumps(series) + '\n'), mode="silent")
        #ciop.publish(os.path.dirname(master_local_path[0]),mode='anonymous')
        #ciop.publish(os.path.dirname(master_local_path[1]),mode='anonymous')
        #ciop.publish(os.path.dirname(slave_local_path[0]),mode='anonymous')
        #ciop.publish(os.path.dirname(slave_local_path[1]),mode='anonymous')


try:
    main()
except SystemExit as e:
    if e.args[0]:
        clean_exit(e.args[0])
    raise
else:
    atexit.register(clean_exit, 0)
